




class Slot(models.Model):
    TIPO_SLOT_CHOICES = [
        ('previsto', 'Previsto'),
        ('extra', 'Extra'),
        ('urgente', 'Urgente'),
    ]

    STATUS_CHOICES = [
        ('ativo', 'Ativo'),
        ('preenchido', 'Preenchido'),
        ('cancelado', 'Cancelado'),
    ]

    estabelecimento     = models.ForeignKey(Estabelecimento, on_delete=models.CASCADE, related_name='slots')
    data                = models.DateField()
    hora_inicio         = models.TimeField()
    hora_fim            = models.TimeField()
    quantidade_motoboys = models.PositiveIntegerField()
    tipo_slot           = models.CharField(max_length=10, choices=TIPO_SLOT_CHOICES, default='previsto')
    status              = models.CharField(max_length=12, choices=STATUS_CHOICES, default='ativo')
    criado_em           = models.DateTimeField(default=timezone.now)

    class Meta:
        constraints = [
            models.CheckConstraint(check=models.Q(quantidade_motoboys__gt=0), name='quantidade_motoboys_positiva')
        ]

    def __str__(self):
        return f"{self.estabelecimento.nome} | {self.data} | {self.hora_inicio}-{self.hora_fim}"



class Slot_Candidatura(models.Model):
    STATUS_CHOICES = [
        ('pendente', 'Pendente'),
        ('confirmado', 'Confirmado'),
        ('recusado', 'Recusado'),
        ('cancelado', 'Cancelado'),
    ]

    slot             = models.ForeignKey(Slot, on_delete=models.CASCADE, related_name='candidaturas')
    motoboy          = models.ForeignKey(Motoboy, on_delete=models.CASCADE, related_name='candidaturas_slot')
    status           = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pendente')
    data_candidatura = models.DateTimeField(default=timezone.now)

    class Meta:
        unique_together = ('slot', 'motoboy')

    def __str__(self):
        return f"{self.motoboy.nome} → {self.slot}"

class Slot_Vaga(models.Model):
    contrato    = models.ForeignKey(Estabelecimento_Contrato, on_delete=models.CASCADE)
    data        = models.DateField()
    hora_inicio = models.TimeField()
    hora_fim    = models.TimeField()
    motoboy     = models.ForeignKey(Motoboy, null=True, blank=True, on_delete=models.SET_NULL)
    status      = models.CharField(
        max_length=20,
        choices=[("disponivel", "Disponível"), ("ocupada", "Ocupada"), ("cancelada", "Cancelada")],
        default="disponivel"
    )

    class Meta:
        unique_together = ('contrato', 'data', 'hora_inicio')

    def __str__(self):
        return f'{self.contrato.estabelecimento.nome} | {self.data} | {self.hora_inicio} - {self.hora_fim}'
